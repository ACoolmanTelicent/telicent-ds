import{j as a}from"./jsx-runtime-CKrituN3.js";import{c as m,a as O,_ as W}from"./createTheme-CxKjqECZ.js";import{_ as r}from"./extends-CCbyfPlC.js";import{r as b}from"./index-CBqU2yxZ.js";import{a as F,g as U,s as q,r as w,u as A,c as D,b as G}from"./styled-B4o22OB_.js";import{S as J,F as K}from"./FormControlLabel-D0ZLyakJ.js";import{c as k}from"./createSvgIcon-Ax4BTbPH.js";import"./_commonjsHelpers-BosuxZz1.js";import"./emotion-use-insertion-effect-with-fallbacks.browser.esm-BBmpo-GE.js";import"./useFormControl-Bd6AoRoF.js";import"./ButtonBase-DceNHgrg.js";import"./assertThisInitialized-LnzLPM7_.js";import"./useForkRef-ByGBP3wL.js";import"./useControlled-BAdDSZ1i.js";import"./Typography-debr-egO.js";const Q=k(a.jsx("path",{d:"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"}),"CheckBoxOutlineBlank"),X=k(a.jsx("path",{d:"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"}),"CheckBox"),Y=k(a.jsx("path",{d:"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"}),"IndeterminateCheckBox");function Z(e){return U("MuiCheckbox",e)}const ee=F("MuiCheckbox",["root","checked","disabled","indeterminate","colorPrimary","colorSecondary","sizeSmall","sizeMedium"]),f=ee,oe=["checkedIcon","color","icon","indeterminate","indeterminateIcon","inputProps","size","className"],ae=e=>{const{classes:o,indeterminate:t,color:s,size:c}=e,n={root:["root",t&&"indeterminate",`color${m(s)}`,`size${m(c)}`]},u=G(n,Z,o);return r({},o,u)},te=q(J,{shouldForwardProp:e=>w(e)||e==="classes",name:"MuiCheckbox",slot:"Root",overridesResolver:(e,o)=>{const{ownerState:t}=e;return[o.root,t.indeterminate&&o.indeterminate,o[`size${m(t.size)}`],t.color!=="default"&&o[`color${m(t.color)}`]]}})(({theme:e,ownerState:o})=>r({color:(e.vars||e).palette.text.secondary},!o.disableRipple&&{"&:hover":{backgroundColor:e.vars?`rgba(${o.color==="default"?e.vars.palette.action.activeChannel:e.vars.palette[o.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})`:O(o.color==="default"?e.palette.action.active:e.palette[o.color].main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},o.color!=="default"&&{[`&.${f.checked}, &.${f.indeterminate}`]:{color:(e.vars||e).palette[o.color].main},[`&.${f.disabled}`]:{color:(e.vars||e).palette.action.disabled}})),ne=a.jsx(X,{}),re=a.jsx(Q,{}),se=a.jsx(Y,{}),ce=b.forwardRef(function(o,t){var s,c;const n=A({props:o,name:"MuiCheckbox"}),{checkedIcon:u=ne,color:R="primary",icon:L=re,indeterminate:i=!1,indeterminateIcon:C=se,inputProps:H,size:h="medium",className:T}=n,V=W(n,oe),v=i?C:L,I=i?C:u,g=r({},n,{color:R,indeterminate:i,size:h}),y=ae(g);return a.jsx(te,r({type:"checkbox",inputProps:r({"data-indeterminate":i},H),icon:b.cloneElement(v,{fontSize:(s=v.props.fontSize)!=null?s:h}),checkedIcon:b.cloneElement(I,{fontSize:(c=I.props.fontSize)!=null?c:h}),ownerState:g,ref:t,className:D(y.root,T)},V,{classes:y}))}),z=ce,x=({label:e,...o})=>e?a.jsx(K,{control:a.jsx(z,{...o}),label:e,className:"m-0"}):a.jsx(z,{...o});try{x.displayName="TeliCheckbox",x.__docgenInfo={description:`Checkboxes can be used to turn one or more options on or off.
If you have multiple options appearing in a list, you can preserve space by using checkboxes instead of on/off switches.
If you have a single option, avoid using a checkbox and use an on/off switch instead.
More information about this component can be found [here](https://mui.com/material-ui/react-checkbox/)`,displayName:"TeliCheckbox",props:{label:{defaultValue:null,description:"",name:"label",required:!1,type:{name:"string"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"((instance: HTMLButtonElement | null) => void) | RefObject<HTMLButtonElement> | null"}},component:{defaultValue:null,description:"",name:"component",required:!1,type:{name:"ElementType<any, keyof IntrinsicElements>"}}}}}catch{}const ye={component:x},l={args:{label:"checkbox label"}},p={args:{disableRipple:!0,inputProps:{"aria-label":"Without label"}}},d={args:{icon:a.jsx("i",{className:"ri-heart-3-line"}),checkedIcon:a.jsx("i",{className:"ri-heart-3-fill"})}};var _,j,$;l.parameters={...l.parameters,docs:{...(_=l.parameters)==null?void 0:_.docs,source:{originalSource:`{
  args: {
    label: "checkbox label"
  }
}`,...($=(j=l.parameters)==null?void 0:j.docs)==null?void 0:$.source}}};var B,M,P;p.parameters={...p.parameters,docs:{...(B=p.parameters)==null?void 0:B.docs,source:{originalSource:`{
  args: {
    disableRipple: true,
    inputProps: {
      "aria-label": "Without label"
    }
  }
}`,...(P=(M=p.parameters)==null?void 0:M.docs)==null?void 0:P.source}}};var N,S,E;d.parameters={...d.parameters,docs:{...(N=d.parameters)==null?void 0:N.docs,source:{originalSource:`{
  args: {
    icon: <i className="ri-heart-3-line" />,
    checkedIcon: <i className="ri-heart-3-fill" />
  }
}`,...(E=(S=d.parameters)==null?void 0:S.docs)==null?void 0:E.source}}};const ze=["Basic","WithoutLabel","CheckboxIcon"];export{l as Basic,d as CheckboxIcon,p as WithoutLabel,ze as __namedExportsOrder,ye as default};
